/* source keypos definitions */
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

// ZMK includes
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Custom includes
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/polish.dtsi"

#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

// LAYERS
#define DEF 0
#define NUM 1
#define FN 2
#define NAV 3
#define CODE 4
#define LANG 5
#define SYS 6
#define MOUSE 7
#define UC 8
#define BLTH 9

#include "combos.dtsi"  // requires layer aliases
#include "extra_keys.h"

// KEY ALIASES
#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmlf, &kp, &kp, KEYS_R THUMBS)  // left-hand macro HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "


// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

// tap: left-parenthesis | shft + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shft + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// smart-mouse, requires PR #1366
ZMK_BEHAVIOR(smart_mouse, tri_state,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
    ignored-layers = <MOUSE>;
)

/* Custom behaviors */

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

ZMK_BEHAVIOR(lt_swap, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&swapper>;
)


// Sticky layer + sticky shift (workaround for issue #1421)
ZMK_BEHAVIOR(sls, sticky_key,
    release-after-ms = <1000>;
    bindings = <&uc_shift>;
    ignore-modifiers;
)
ZMK_BEHAVIOR(uc_shift, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &mo UC &kp LSHFT>
             , <&macro_pause_for_release>
             , <&macro_release &mo UC &kp LSHFT>;
)

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&comma_inner_morph>;
)
ZMK_BEHAVIOR(comma_inner_morph, mod_morph,
    bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&dot_inner_morph>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(dot_inner_morph, mod_morph,
    bindings = <&kp COLON>, <&kp GREATER_THAN>;
    mods = <(MOD_LCTL|MOD_RCTL)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// workaround for showing windows menu on LG()
ZMK_BEHAVIOR(win_lft, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp LEFT>
             , <&macro_release &kp LGUI>;
)

ZMK_BEHAVIOR(win_rght, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LGUI>
             , <&macro_tap &kp RIGHT>
             , <&macro_release &kp LGUI>;
)


// CODING MACROS

// golang
ZMK_BEHAVIOR(go_chnl, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&kp LESS_THAN &kp MINUS>;
)

ZMK_BEHAVIOR(go_eql, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&kp COLON &kp EQUAL>;
)

// nvim
ZMK_BEHAVIOR(vim_save, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&kp ESC &kp COLON &kp W &kp RET>;
)

ZMK_BEHAVIOR(vim_quit, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&kp ESC &kp COLON &kp Q &kp RET>;
)

// visual
ZMK_BEHAVIOR(vs_expl, macro,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &kp LCTRL>
             , <&macro_tap &kp LBKT>
             , <&macro_release &kp LCTRL>
             , <&macro_tap  &kp S>;
)
        

// hold tap macros for keys
ZMK_BEHAVIOR(p_f, macro,
    wait-ms = <200>;
    tap-ms = <1>;
    bindings = <&macro_press &kp F>
             , <&macro_release &kp F>;
)

ZMK_LAYER(def_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp SQT
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &lt LANG A   &hml LALT S   &hml LSHFT D  &hmlf LCTRL p_f &kp G             &kp H         &hmr LCTRL J  &hmr RSHFT K  &hmr LALT L   &lt LANG P
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &hml LGUI Z   &kp X         &kp C         &kp V         &kp B             &kp N         &kp M         &comma_morph  &dot_morph    &qexcl
//  ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                  &mo NAV       &kp TAB       &kp SPACE         &lt FN RET    &lt NUM BSPC  &smart_shft
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      ___           &kp N7        &kp N8        &kp N9        ___               ___           ___           ___           ___           ___          
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp N0        &kp N4        &kp N5        &kp N6        ___               ___           ___           ___           ___           ___
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           &kp N1        &kp N2        &kp N3        ___               ___           ___           ___           ___           ___          
//  ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────╯
                                  ___           ___           ___               ___           ___           ___                                                    
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┼─────────────╯                                          
)

ZMK_LAYER(func_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      ___           &kp F7        &kp F8        &kp F9        &kp F12           ___           ___           ___           ___           ___          
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           &kp F4        &kp F5        &kp F6        &kp F11           ___           ___           ___           ___           ___          
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           &kp F1        &kp F2        &kp F3        &kp F10           ___           ___           ___           ___           ___          
//  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────╯
                                  ___           ___           ___               ___           ___           ___
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯      
)

ZMK_LAYER(nav_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      ___           ___           &kp LS(TAB)   &swapper      ___               ___           ___           ___           ___           &kp C_VOL_UP
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           ___           ___           ___           ___               &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp C_VOL_DN         
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                 _BT_SEL_KEYS_                                  ___           &win_lft      &win_rght     ___           &kp C_PP          
//  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────╯
                                  ___           ___           ___               ___           ___           ___
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯  
)

ZMK_LAYER(code_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      ___           ___           ___           ___           ___               &vim_quit     &vs_expl      ___           ___           ___          
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           ___           ___           ___           ___               ___           &go_eql       &go_chnl      ___           ___                  
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      ___           ___           ___           ___           ___               ___           &vim_save     ___           ___           ___               
//  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────╯
                                  ___           ___           ___               ___           ___           ___
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯      
)

ZMK_LAYER(lang_layer,
//  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      ___           ___           &kp RA(E)     ___           ___               ___           ___           ___           &kp RA(O)     ___          
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp RA(A)     &kp RA(S)     ___           ___           ___               ___           ___           ___           &kp RA(L)     ___
//  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp RA(Z)     &kp RA(X)     &kp RA(C)     ___           ___               &kp RA(N)     ___           ___           ___           ___              
//  ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────╯
                                  ___           ___           ___               ___           ___           ___
//                              ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯      
)